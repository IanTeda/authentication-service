###############################################################################
## CARGO MAKEFILE
## Rust task runner and build tool.
##
## https://github.com/sagiegurari/cargo-make
## $ cargo install --force cargo-make
## ############################################################################

## https://github.com/watchexec/cargo-watch
## $ cargo make watch
[tasks.watch]
install_crate = "cargo-watch"
command = "cargo"
args = ["watch", "--clear", "--quiet", "--exec", "run", "--watch", "src"]

## Update git submodules in repository
## $ git submodule update --recursive --remote
## $ cargo make submodules
[tasks.submodules]
command = "git"
args = ["submodule", "update", "--recursive", "--remote"]

[tasks.production]
env = { "APP_ENVIRONMENT" = "production" }
command = "cargo"
args = ["run"]

[tasks.debug]
env = { "RUST_LOG" = "debug" }
command = "cargo"
args = ["run"]

## https://github.com/xd009642/tarpaulin
## $ cargo make tarpaulin
[tasks.coverage]
install_crate = "cargo-tarpaulin"
command = "cargo"
args = ["tarpaulin", "--ignore-tests"]

## Warn about database lock issues
[tasks.db_warn]
script = [
    'echo "WARNING: Please close VS Code to run this task and avoid database lock issues."',
    'sleep 10'
]

## Drop Database
## $ sqlx database drop
## $ cargo make db_drop
[tasks.db_drop]
install_crate = "sqlx-cli"
command = "sqlx"
args = ["database", "drop", "-y"]

## Create Database
## $ sqlx database create
[tasks.db_create]
install_crate = "sqlx-cli"
command = "sqlx"
args = ["database", "create"]

## Migrate database
## $ sqlx migrate run
[tasks.db_migrate]
install_crate = "sqlx-cli"
command = "sqlx"
args = ["migrate", "run"]

[tasks.db_prepare]
install_crate = "sqlx-cli"
command = "cargo"
args = ["sqlx", "prepare", "--check"]

[tasks.db_prepare_generate]
install_crate = "sqlx-cli"
command = "cargo"
args = ["sqlx", "prepare"]

# Run Database tasks. You need to exit vscode before running as vscode has an open connection to the database.
# $ cargo make db
[tasks.db]
dependencies = [
    "db_warn",
    "db_drop",
    "db_create",
    "db_migrate",
    "db_prepare_generate",
    "db_prepare",
]

[tasks.sqlx_offline]
install_crate = "sqlx-cli"
command = "cargo"
args = ["sqlx", "prepare", "--", "--bin", "authentication_service"]

[tasks.docker_build]
command = "docker"
args = ["build", "--tag", "authentication:latest", "--file", "Dockerfile", "."]

[tasks.docker_image]
dependencies = ["sqlx_offline", "docker_build"]

# Install dependencies `$ sudo apt install mkcert libnss3-tools`
# Install local CA `$ mkcert -install` (first time only)
# Usage: `$ cargo make generate_tls`
[tasks.generate_tls]
description = "Generate a self-signed TLS certificate and private key in PEM format using mkcert"
command = "mkcert"
args = [
    "-key-file",
    "tls/server-key.pem",
    "-cert-file",
    "tls/server.pem",
    "localhost",
]
